{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function PalavraForca(_ref) {\n  var changeScreen = _ref.changeScreen,\n    mudarPalavra = _ref.mudarPalavra;\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    palavra = _useState2[0],\n    setPalavra = _useState2[1];\n  var handleClick = function handleClick() {\n    if (mudarPalavra) {\n      if (palavra.length === 0) {\n        alert(\"A palavra não pode estar vazia!\");\n        return;\n      } else if (palavra.includes(\" \")) {\n        alert(\"A palavra não pode conter espaços!\");\n      } else {\n        mudarPalavra(palavra);\n        changeScreen(\"Forca\");\n      }\n    }\n  };\n  return _jsxs(View, {\n    styles: styles.container,\n    children: [_jsx(Text, {\n      children: \"popipopipopopipo\"\n    }), _jsx(TextInput, {\n      style: styles.textInput,\n      placeholder: \"Digite a palavra\",\n      value: palavra,\n      onChangeText: setPalavra\n    }), _jsx(Button, {\n      color: \"#09b092\",\n      title: \"Enviar palavra\",\n      onPress: handleClick\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    gap: 50,\n    backgroundColor: '#9effd3',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  textInput: {\n    color: '#125c4e',\n    backgroundColor: '#41d9bd',\n    padding: 5,\n    borderRadius: 5\n  }\n});","map":{"version":3,"names":["useState","StyleSheet","View","Button","TextInput","jsx","_jsx","jsxs","_jsxs","PalavraForca","_ref","changeScreen","mudarPalavra","_useState","_useState2","_slicedToArray","palavra","setPalavra","handleClick","length","alert","includes","styles","container","children","Text","style","textInput","placeholder","value","onChangeText","color","title","onPress","create","flex","gap","backgroundColor","alignItems","justifyContent","padding","borderRadius"],"sources":["C:/Users/Karoliny Daiana/OneDrive/Documentos/GitHub/Jogo-da-velha/src/PalavraForca.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { StyleSheet, View, Button, TextInput } from \"react-native\";\r\n\r\nexport default function PalavraForca({\r\n    changeScreen,\r\n    mudarPalavra\r\n}) {\r\n\r\n    const [palavra, setPalavra] = useState(\"\");\r\n\r\n    const handleClick = () => {\r\n        if(mudarPalavra) {\r\n            if(palavra.length === 0) {\r\n                alert(\"A palavra não pode estar vazia!\")\r\n                return\r\n            } else if(palavra.includes(\" \")) {\r\n                alert(\"A palavra não pode conter espaços!\")\r\n            } else {\r\n                mudarPalavra(palavra)\r\n                changeScreen(\"Forca\")\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <View styles={styles.container}>\r\n\r\n            <Text>popipopipopopipo</Text>\r\n\r\n            <TextInput \r\n                style={styles.textInput}\r\n                placeholder=\"Digite a palavra\" \r\n                value={palavra} \r\n                onChangeText={setPalavra}\r\n            />\r\n\r\n            <Button \r\n                color='#09b092'\r\n                title=\"Enviar palavra\" \r\n                onPress={handleClick}\r\n            />\r\n            \r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      gap: 50,  \r\n      backgroundColor: '#9effd3',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    textInput: {\r\n        color: '#125c4e',\r\n        backgroundColor: '#41d9bd',\r\n        padding: 5,\r\n        borderRadius: 5,\r\n      },\r\n  })"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,SAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAGjC,eAAe,SAASC,YAAYA,CAAAC,IAAA,EAGjC;EAAA,IAFCC,YAAY,GAAAD,IAAA,CAAZC,YAAY;IACZC,YAAY,GAAAF,IAAA,CAAZE,YAAY;EAGZ,IAAAC,SAAA,GAA8Bb,QAAQ,CAAC,EAAE,CAAC;IAAAc,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAnCG,OAAO,GAAAF,UAAA;IAAEG,UAAU,GAAAH,UAAA;EAE1B,IAAMI,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IACtB,IAAGN,YAAY,EAAE;MACb,IAAGI,OAAO,CAACG,MAAM,KAAK,CAAC,EAAE;QACrBC,KAAK,CAAC,iCAAiC,CAAC;QACxC;MACJ,CAAC,MAAM,IAAGJ,OAAO,CAACK,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC7BD,KAAK,CAAC,oCAAoC,CAAC;MAC/C,CAAC,MAAM;QACHR,YAAY,CAACI,OAAO,CAAC;QACrBL,YAAY,CAAC,OAAO,CAAC;MACzB;IACJ;EACJ,CAAC;EAED,OACIH,KAAA,CAACN,IAAI;IAACoB,MAAM,EAAEA,MAAM,CAACC,SAAU;IAAAC,QAAA,GAE3BlB,IAAA,CAACmB,IAAI;MAAAD,QAAA,EAAC;IAAgB,CAAM,CAAC,EAE7BlB,IAAA,CAACF,SAAS;MACNsB,KAAK,EAAEJ,MAAM,CAACK,SAAU;MACxBC,WAAW,EAAC,kBAAkB;MAC9BC,KAAK,EAAEb,OAAQ;MACfc,YAAY,EAAEb;IAAW,CAC5B,CAAC,EAEFX,IAAA,CAACH,MAAM;MACH4B,KAAK,EAAC,SAAS;MACfC,KAAK,EAAC,gBAAgB;MACtBC,OAAO,EAAEf;IAAY,CACxB,CAAC;EAAA,CAEA,CAAC;AAEf;AAEA,IAAMI,MAAM,GAAGrB,UAAU,CAACiC,MAAM,CAAC;EAC7BX,SAAS,EAAE;IACTY,IAAI,EAAE,CAAC;IACPC,GAAG,EAAE,EAAE;IACPC,eAAe,EAAE,SAAS;IAC1BC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE;EAClB,CAAC;EACDZ,SAAS,EAAE;IACPI,KAAK,EAAE,SAAS;IAChBM,eAAe,EAAE,SAAS;IAC1BG,OAAO,EAAE,CAAC;IACVC,YAAY,EAAE;EAChB;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}